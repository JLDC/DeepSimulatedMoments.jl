var documenterSearchIndex = {"docs":
[{"location":"api/#Data-Generating-Processes","page":"API","title":"Data Generating Processes","text":"","category":"section"},{"location":"api/#AbstractDGP","page":"API","title":"AbstractDGP","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"AbstractDGP\nnfeatures\nnparams\npriordraw\ngenerate","category":"page"},{"location":"api/#DeepSimulatedMoments.AbstractDGP","page":"API","title":"DeepSimulatedMoments.AbstractDGP","text":"AbstractDGP{T<:AbstractFloat}\n\nAbstract type for a DGP.\n\n\n\n\n\n","category":"type"},{"location":"api/#DeepSimulatedMoments.nfeatures","page":"API","title":"DeepSimulatedMoments.nfeatures","text":"nfeatures(d::AbstractDGP)\n\nNumber of features in the data.\n\nArguments\n\nd::AbstractDGP: DGP to get the number of features from.\n\nReturns\n\nInt: Number of features.\n\n\n\n\n\n","category":"function"},{"location":"api/#DeepSimulatedMoments.nparams","page":"API","title":"DeepSimulatedMoments.nparams","text":"nparams(d::AbstractDGP)\n\nNumber of parameters in the DGP.\n\nArguments\n\nd::AbstractDGP: DGP to get the number of parameters from.\n\nReturns\n\nInt: Number of parameters.\n\n\n\n\n\n","category":"function"},{"location":"api/#DeepSimulatedMoments.priordraw","page":"API","title":"DeepSimulatedMoments.priordraw","text":"priordraw(d::AbstractDGP, S::Int)\n\nDraw S parameter samples from the prior.\n\nArguments\n\nd::AbstractDGP{T}: DGP to draw the parameters from.\nS::Int: Number of samples to draw.\n\nReturns\n\nMatrix{T}: S samples of the parameters (dimension: S × nparams(d)).\n\n\n\n\n\n","category":"function"},{"location":"api/#DeepSimulatedMoments.generate","page":"API","title":"DeepSimulatedMoments.generate","text":"generate(d::AbstractDGP, S::Int)\n\nGenerate S data and parameter samples from the DGP.\n\nArguments\n\nd::AbstractDGP{T}: DGP to generate the data from.\nS::Int: Number of samples to generate.\n\nReturns\n\nTuple{Matrix{T}, Matrix{T}}: S samples of the data and parameters \n\n(dimension: nfeatures(d) × S × N and S × nparams(d)).\n\n\n\n\n\ngenerate(θ::AbstractVector{T}, d::AbstractDGP{T}, S::Int)\n\nGenerate S data samples from the DGP at parameters θ.\n\nArguments\n\nθ::AbstractVector{T}: Parameters of DGP used to generate the data.\nd::AbstractDGP{T}: DGP to generate the data from.\nS::Int: Number of samples to generate.\n\nReturns\n\nMatrix{T}: S samples of the data (dimension: nfeatures(d) × S × N).\n\n\n\n\n\n","category":"function"},{"location":"api/#Predefined-DGPs","page":"API","title":"Predefined DGPs","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"MA2\nLogit\nGARCH","category":"page"},{"location":"api/#DeepSimulatedMoments.MA2","page":"API","title":"DeepSimulatedMoments.MA2","text":"MA2{T} <: AbstractDGP{T}\n\nA simple MA(2) process. (T defaults to Float32)\n\nFields\n\nN::Int: Number of observations in each sample.\n\n\n\n\n\n","category":"type"},{"location":"api/#DeepSimulatedMoments.Logit","page":"API","title":"DeepSimulatedMoments.Logit","text":"Logit{T} <: AbstractDGP{T}\n\nA simple logistic regression model. (T defaults to Float32)\n\nFields\n\nN::Int: Number of observations in each sample.\nK::Int: Number of features in each sample.\n\n\n\n\n\n","category":"type"},{"location":"api/#DeepSimulatedMoments.GARCH","page":"API","title":"DeepSimulatedMoments.GARCH","text":"GARCH{T} <: AbstractDGP{T}\n\nA simple GARCH(1,1) process. (T defaults to Float32)\n\nFields\n\nN::Int: Number of observations in each sample.\n\n\n\n\n\n","category":"type"},{"location":"api/#Neural-Networks","page":"API","title":"Neural Networks","text":"","category":"section"},{"location":"api/#Temporal-Convolutional-Networks","page":"API","title":"Temporal Convolutional Networks","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"TemporalBlock\nTCN","category":"page"},{"location":"api/#DeepSimulatedMoments.TemporalBlock","page":"API","title":"DeepSimulatedMoments.TemporalBlock","text":"TemporalBlock(chan_in, chan_out; dilation, kernel_size, residual, pad, dropout_rate)\n\nTemporal block with chan_in input channels and chan_out output channels. Each block consists of two causal convolutional layers with kernel_size and dilation followed by batch normalization and dropout. If residual is true, a skip connection is added.\n\nArguments\n\nchan_in::Int: Number of input channels.\nchan_out::Int: Number of output channels.\n\nKeyword arguments\n\ndilation::Int: Kernel dilation.\nkernel_size::Int: Size of the convolutional kernel.\nresidual::Bool: Whether to use residual connections.\npad::Function: Padding to use for the convolutional layers.\ndropout_rate::AbstractFloat: Dropout rate to use for the convolutional layers.\n\nReturns\n\nChain: Temporal block\n\n\n\n\n\n","category":"function"},{"location":"api/#DeepSimulatedMoments.TCN","page":"API","title":"DeepSimulatedMoments.TCN","text":"TCN(channels; kernel_size, dilation_factor, residual, pad, dropout_rate)\n\nTemporal convolutional network (TCN) with length(channels) - 1 layers. Each layer is a TemporalBlock with channels[i] input channels and channels[i+1]\n\nArguments\n\nchannels::AbstractVector{Int}: Number of input and output channels for each layer.\nkernel_size::Int: Size of the convolutional kernel.\ndilation_factor::Int: Factor by which the dilation is increased for each layer. (default: 2)\nresidual::Bool: Whether to use residual connections. (default: true)\npad::Function: Padding to use for the convolutional layers. (default: SamePad())\ndropout_rate::AbstractFloat: Dropout rate to use for the convolutional layers. (default: 0.)\n\nReturns\n\nChain: TCN\n\n\n\n\n\n","category":"function"},{"location":"api/#Neural-Network-Utilities","page":"API","title":"Neural Network Utilities","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"tabular2conv\ntabular2rnn","category":"page"},{"location":"api/#DeepSimulatedMoments.tabular2conv","page":"API","title":"DeepSimulatedMoments.tabular2conv","text":"tabular2conv(X::AbstractArray{T, 3}) where T\n\nTransform a (K × S × T) array to a CNN format (1 × T × K × S array). K is the number of features, S is the number of samples, and T is the number of time steps / observations in each sample.\n\nArguments\n\nX::AbstractArray{T, 3}: Array to transform.\n\nReturns\n\nArray{T, 4}: CNN format of X.\n\n\n\n\n\n","category":"function"},{"location":"api/#DeepSimulatedMoments.tabular2rnn","page":"API","title":"DeepSimulatedMoments.tabular2rnn","text":"tabular2rnn(X::AbstractArray{T, 3}) where T\n\nTransform a (K × S × T) array to an RNN format (T-array of K × S matrices). K is the number of features, S is the number of samples, and T is the number  of time steps / observations in each sample.\n\nArguments\n\nX::AbstractArray{T, 3}: Array to transform.\n\nReturns\n\nVector{Matrix{T}}: RNN format of X.\n\n\n\n\n\n","category":"function"},{"location":"DGPs/#Minimal-interfaces-to-implement","page":"Data generating processes","title":"Minimal interfaces to implement","text":"","category":"section"},{"location":"DGPs/","page":"Data generating processes","title":"Data generating processes","text":"To write a custom DGP, the following minimal interfaces must be implemented:","category":"page"},{"location":"DGPs/","page":"Data generating processes","title":"Data generating processes","text":"nfeatures, the number of features in the DGP\nnparams, the number of parameters in the DGP\npriordraw, the prior distribution of the parameters\ngenerate, the function that generates a data set, with two methods:\ngenerate(d::AbstractDGP, S::Int), the function that generates random parameters and a matching data set\n[generate(θ::AbstractVector{T}, d::AbstractDGP{T}, S::Int)](@ref DeepSimulatedMoments.generate","category":"page"},{"location":"DGPs/","page":"Data generating processes","title":"Data generating processes","text":")](@ref), th), the function that generates a data set given a set of parametersθ`","category":"page"},{"location":"DGPs/","page":"Data generating processes","title":"Data generating processes","text":"Once these are implemented, the user can train a neural network on the data set and proceed with statistical inference using the method of simulated moments. TODO: Provide links","category":"page"},{"location":"DGPs/#Example","page":"Data generating processes","title":"Example","text":"","category":"section"},{"location":"DGPs/","page":"Data generating processes","title":"Data generating processes","text":"The following example shows how to implement the minimal interfaces of a DGP for a simple linear regression model with K features.","category":"page"},{"location":"DGPs/#.-Define-the-DGP-struct","page":"Data generating processes","title":"1. Define the DGP struct","text":"","category":"section"},{"location":"DGPs/","page":"Data generating processes","title":"Data generating processes","text":"struct LinearRegression{T} <: AbstractDGP{T}\n    N::Int # Number of observations that our data set will have\n    K::Int # Number of features in our data set\nend","category":"page"},{"location":"DGPs/#.-Implement-the-nfeatures-and-nparams-interface","page":"Data generating processes","title":"2. Implement the nfeatures and nparams interface","text":"","category":"section"},{"location":"DGPs/","page":"Data generating processes","title":"Data generating processes","text":"nfeatures(d::LinearRegression) = d.K\nnparams(d::LinearRegression) = d.K + 1 # We have K features and 1 intercept","category":"page"},{"location":"DGPs/#.-Implement-the-priordraw-interface","page":"Data generating processes","title":"3. Implement the priordraw interface","text":"","category":"section"},{"location":"DGPs/","page":"Data generating processes","title":"Data generating processes","text":"function priordraw(d::LinearRegression{T}, S::Int) where T\n    # Draw random parameters from a standard normal distribution \n    # (we could modify this to draw from a different distribution)\n    θ = randn(T, S, nparams(d))\nend","category":"page"},{"location":"DGPs/#.-Implement-the-generate-interface","page":"Data generating processes","title":"4. Implement the generate interface","text":"","category":"section"},{"location":"DGPs/","page":"Data generating processes","title":"Data generating processes","text":"```julia function generate(d::LinearRegression{T}, S::Int) where T     # Draw random parameters from the prior     θ = priordraw(d, S)     # Generate a data set given the random parameters     x = zeros(T, d.N, S)","category":"page"},{"location":"DGPs/","page":"Data generating processes","title":"Data generating processes","text":"end","category":"page"},{"location":"#DeepSimulatedMoments.jl","page":"Home","title":"DeepSimulatedMoments.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for DeepSimulatedMoments.jl","category":"page"}]
}
